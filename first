public class CustomDltRecoverer extends DeadLetterPublishingRecoverer {

    public CustomDltRecoverer(KafkaTemplate<?, ?> kafkaTemplate) {
        super(kafkaTemplate);
    }

    @Override
    protected ProducerRecord<?, ?> createProducerRecord(
        ConsumerRecord<?, ?> record,
        Headers headers,
        String topic,
        int partition,
        Object key,
        Object value
    ) {
        // Check if the exception was CustomDltException
        Header exceptionTypeHeader = headers.lastHeader(KafkaHeaders.EXCEPTION_TYPE);
        if (exceptionTypeHeader != null) {
            String exceptionType = new String(exceptionTypeHeader.value());
            if (exceptionType.contains("CustomDltException")) {
                // Extract the exception message
                Header exceptionMessageHeader = headers.lastHeader(KafkaHeaders.EXCEPTION_MESSAGE);
                String customMessage = exceptionMessageHeader != null 
                    ? new String(exceptionMessageHeader.value())
                    : "Default error message";
                
                // Send custom message instead of original record
                return new ProducerRecord<>(
                    topic,
                    partition,
                    key,
                    customMessage,  // Your custom string
                    headers
                );
            }
        }

        // Default behavior: send original record
        return super.createProducerRecord(record, headers, topic, partition, key, value);
    }
}



@Service
public class OrderListener {

    @KafkaListener(topics = "orders-topic")
    public void processOrder(Order order) {
        try {
            validateOrder(order);  // Your validation logic
        } catch (ValidationException ex) {
            // Throw custom exception with DLT-specific message
            throw new CustomDltException("Custom DLT message: " + ex.getMessage(), ex);
        }
    }
}


public class CustomDltRecoverer extends DeadLetterPublishingRecoverer {

    public CustomDltRecoverer(KafkaTemplate<?, ?> kafkaTemplate) {
        super(kafkaTemplate);
    }

    @Override
    public void recover(ConsumerRecord<?, ?> record, Exception exception) {
        // Check if the exception is CustomDltException
        if (exception.getCause() instanceof CustomDltException customEx) {
            // Create new headers with the custom message
            Headers headers = new RecordHeaders(record.headers().toArray());
            headers.add("DLT-CUSTOM-MESSAGE", customEx.getDltMessage().getBytes());

            // Create a new ConsumerRecord with the updated headers
            ConsumerRecord<?, ?> newRecord = new ConsumerRecord<>(
                record.topic(),
                record.partition(),
                record.offset(),
                record.key(),
                record.value(),
                headers
            );

            super.recover(newRecord, exception);
        } else {
            // Default handling for other exceptions
            super.recover(record, exception);
        }
    }

    @Override
    protected ProducerRecord<?, ?> createProducerRecord(
        ConsumerRecord<?, ?> record,
        Headers headers,
        String topic,
        int partition,
        Object key,
        Object value
    ) {
        // Check for custom message header
        Header customMessageHeader = headers.lastHeader("DLT-CUSTOM-MESSAGE");
        if (customMessageHeader != null) {
            return new ProducerRecord<>(
                topic,
                partition,
                key,
                new String(customMessageHeader.value()),  // Custom message
                headers
            );
        }

        // Default: send original record
        return super.createProducerRecord(record, headers, topic, partition, key, value);
    }
}


@Configuration
public class KafkaConfig {

    @Bean
    public CustomDltRecoverer dltRecoverer(KafkaTemplate<String, Object> kafkaTemplate) {
        return new CustomDltRecoverer(kafkaTemplate);
    }

    @Bean
    public DefaultErrorHandler errorHandler(CustomDltRecoverer dltRecoverer) {
        return new DefaultErrorHandler(dltRecoverer, new FixedBackOff(0L, 0));
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Object> containerFactory(
        ConsumerFactory<String, Object> consumerFactory,
        DefaultErrorHandler errorHandler
    ) {
        ConcurrentKafkaListenerContainerFactory<String, Object> factory = 
            new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory);
        factory.setCommonErrorHandler(errorHandler);
        return factory;
    }
}
